AWSTemplateFormatVersion: 2010-09-09
Description: s3-Athena ETL Pipeline stack


# Parameters:


Mappings:
  EnvConfig:
    dev:
      S3BucketName: "etl-pipeline-input-data-bucket"
      PartialDataBucketName: "project-partials-1745563858254"
      DefaultRegion: "ap-south-1"
      GlueJobConfigurationTableName: "glue-job-configurations"
      GlueJobName: "csv-data-processor-glue-job"
      ProcessedDataGlueCatlogDatabaseName: "processed_data_db"
      ProcessedDataGlueCrawlerName: "processed-data-crawler"
      TestUserEmail: "puneet.dwivedi@infosys.com"
      GlueJobFailureAlertSNSTopicName: "glue-job-failure-sns-alert"

Resources:

  # S3 Bucket
  PipelineInputDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [EnvConfig, dev, S3BucketName]
      NotificationConfiguration: # event on object creation in the raw_data/
        LambdaConfigurations: 
          - Event: s3:ObjectCreated:*
            Function: !GetAtt GlueJobRunnerLambda.Arn
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "raw_data/"
  
  # s3event glue job lamba runner execution role
  GlueJobRunnerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies: 
        - PolicyName: CustomPolicyToAcessS3DDBGLUE
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub 
                    - "arn:aws:s3:::${BucketName}/*"
                    - BucketName: !FindInMap [EnvConfig, dev, S3BucketName]
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Sub
                    - "arn:aws:dynamodb:${Region}:637607366496:table/${TableName}"
                    - Region: !FindInMap [EnvConfig, dev, DefaultRegion]
                      TableName: !FindInMap [EnvConfig, dev, GlueJobConfigurationTableName]
              - Effect: Allow
                Action:
                  - glue:StartJobRun
                Resource: !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:job/*"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # on s3 event glue runner
  GlueJobRunnerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !FindInMap [EnvConfig, dev, PartialDataBucketName]
        S3Key: s3_event_processor.zip
      Handler: s3_event_processor.lambda_handler
      Runtime: python3.9
      Role: !GetAtt GlueJobRunnerLambdaExecutionRole.Arn

  # permission to the s3 to invoke the glue job runner labmda function
  S3DataBucketInvokeGlueJobRunnerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GlueJobRunnerLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn : !Sub 
        - "arn:aws:s3:::${BucketName}"
        - BucketName: !FindInMap [EnvConfig, dev, S3BucketName]

  # role for the glue job to run glue job 
  TransformingDataGlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # glue job for transforming data
  TransformingDataGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !FindInMap [EnvConfig, dev, GlueJobName]
      Role: !GetAtt TransformingDataGlueJobRole.Arn
      Command:
        Name: glueetl
        # ScriptLocation: !Sub 
        #   - "s3://${BucketName}/{JobName}.py"
        #   - BucketName: !FindInMap [EnvConfig, dev, PartialDataBucketName]
        #     JobName: !FindInMap [EnvConfig, dev, GlueJobName]
        ScriptLocation: "s3://project-partials-1745563858254/csv-data-processor-glue-job.py"
        PythonVersion: '3'
      MaxRetries: 0
      Timeout: 10
      NumberOfWorkers: 2
      WorkerType: Standard
      GlueVersion: "3.0"

  # glue crawler runner lambda execution role
  GlueCrawlerRunnerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CustomPolicyToAcessRunningGlueJob
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: # todo for now random
              - Effect: Allow # glue crawler start 
                Action:
                  - glue:StartCrawler
                Resource: !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/*"
              - Effect: Allow # athena query execution
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                Resource: "*"
              - Effect: Allow # get and put s3 object
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::aws-athena-query-results-${AWS::AccountId}-${AWS::Region}/*"
              - Effect: Allow # to publish alert to sns 
                Action:
                  - sns:Publish
                Resource: !Ref GlueJobFailureAlertSNSTopic
  # lambda for running crawler
  GlueCrawlerRunnerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !FindInMap [EnvConfig, dev, PartialDataBucketName]
        S3Key: glue_event_processor.zip
      Handler: glue_event_processor.lambda_handler
      Runtime: python3.9
      Role: !GetAtt GlueCrawlerRunnerLambdaExecutionRole.Arn
  
  # invoking permission to lambda
  GlueCrawlerRunnerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GlueCrawlerRunnerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GlueJobEventRule.Arn

  # glue job event bridge
  GlueJobEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "glue-job-event-rule"
      EventPattern:
        source:           
          - "aws.glue"
        detail-type:      
          - "Glue Job State Change"
        detail:
          jobName:
            - !FindInMap [EnvConfig, dev, GlueJobName]
          state:
            - "SUCCEEDED"
            - "FAILED"
      Targets:
        - Arn: !GetAtt GlueCrawlerRunnerLambda.Arn 
          Id: "glue-job-completion-target"
  
  # glue catlog database
  GlueCatlogDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !FindInMap [EnvConfig, dev, ProcessedDataGlueCatlogDatabaseName]  
        Description: Glue database to hold crawler tables

  # glue crawler role      
  ProcessedDataGlueCrawlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  # glue crawler
  ProcessedDataGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !FindInMap [EnvConfig, dev, ProcessedDataGlueCrawlerName] 
      Role: !GetAtt ProcessedDataGlueCrawlerRole.Arn
      DatabaseName: !FindInMap [EnvConfig, dev, ProcessedDataGlueCatlogDatabaseName]  
      Targets:
        S3Targets:
          - Path: !Sub 
              - "s3://${BucketName}/processed_data"
              - BucketName: !FindInMap [EnvConfig, dev, S3BucketName]
      TablePrefix: table_
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      RecrawlPolicy:
        RecrawlBehavior: CRAWL_EVERYTHING
      Configuration: >-
        {
          "Version": 1.0,
          "Grouping": {
            "TableGroupingPolicy": "CombineCompatibleSchemas"
          }
        }

  # athena query runner lambda exection role
  AthenaQueryRunnerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CustomPolicyToAcessRunningGlueJob
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: # todo for now random
              - Effect: Allow # athena query execution
                Action:
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                Resource:
                  - arn:aws:s3:::*
              - Effect: Allow # get and put s3 object
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:  "arn:aws:s3:::etl-pipeline-input-data-bucket/athena-query-result/*"
              # Glue permissions
              - Effect: Allow
                Action: glue:*
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/*
                  - !Sub arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*/*

  # athen query runner lamba
  AthenaQueryRunnerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        S3Bucket: !FindInMap [EnvConfig, dev, PartialDataBucketName]
        S3Key: athena_query_runner.zip
      Handler: athena_query_runner.lambda_handler
      Runtime: python3.9
      Role: !GetAtt AthenaQueryRunnerLambdaExecutionRole.Arn

  # event brideg for the 
  CrawlerCompletionEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: 'crawler-processed-data-event-rule'
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - Glue Crawler State Change
        detail:
          state:
            - Succeeded
          crawlerName:
            - !FindInMap [EnvConfig, dev, ProcessedDataGlueCrawlerName]
      Targets:
        - Arn: !GetAtt AthenaQueryRunnerLambda.Arn
          Id: AthenaLambdaTarget

  # lambda invocation permission to the crawler event rule
  AllowEventInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AthenaQueryRunnerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CrawlerCompletionEventRule.Arn

  # alert infrastructure for the glue job failure

  # sns topic
  GlueJobFailureAlertSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !FindInMap [EnvConfig, dev, GlueJobFailureAlertSNSTopicName]
  
  # sns subscription
  GlueJobFailureAlertSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:  !Ref GlueJobFailureAlertSNSTopic
      Protocol: email
      Endpoint: !FindInMap [EnvConfig, dev, TestUserEmail]